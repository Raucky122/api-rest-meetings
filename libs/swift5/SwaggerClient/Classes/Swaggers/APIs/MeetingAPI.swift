//
// MeetingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MeetingAPI {
    /**
     Cancel Meeting
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter email: (query) Dispatch an email to participants with the specified cancellation message. (optional, default to false)
     - parameter cancellationMessage: (query) Message sent to participants when meeting is deleted and email is selected (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelMeeting(userId: Int, meetingId: Int, email: Bool? = nil, cancellationMessage: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        cancelMeetingWithRequestBuilder(userId: userId, meetingId: meetingId, email: email, cancellationMessage: cancellationMessage).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Cancel Meeting
     - DELETE /v1/user/{user_id}/scheduled_meeting/{meeting_id}
     - This endpoint deletes a scheuled meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter email: (query) Dispatch an email to participants with the specified cancellation message. (optional, default to false)
     - parameter cancellationMessage: (query) Message sent to participants when meeting is deleted and email is selected (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func cancelMeetingWithRequestBuilder(userId: Int, meetingId: Int, email: Bool? = nil, cancellationMessage: String? = nil) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email, 
            "cancellationMessage": cancellationMessage
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create Meeting
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meeting: (body) The desired configuration for the meeting. (&lt;b&gt;NOTE&lt;/b&gt; The model provided here is a &lt;i&gt;typical&lt;/i&gt; minimum set of meeting parameters.) 
     - parameter personalMeeting: (query) If set to true, the meeting is scheduled using the user&#39;s personal meeting ID (optional)
     - parameter email: (query) If set to true, sends invitation emails to all listed participants. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMeeting(userId: Int, meeting: ScheduleMeetingMinComp, personalMeeting: Bool? = nil, email: Bool? = nil, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        createMeetingWithRequestBuilder(userId: userId, meeting: meeting, personalMeeting: personalMeeting, email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create Meeting
     - POST /v1/user/{user_id}/scheduled_meeting
     - This endpoint will create a scheduled meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meeting: (body) The desired configuration for the meeting. (&lt;b&gt;NOTE&lt;/b&gt; The model provided here is a &lt;i&gt;typical&lt;/i&gt; minimum set of meeting parameters.) 
     - parameter personalMeeting: (query) If set to true, the meeting is scheduled using the user&#39;s personal meeting ID (optional)
     - parameter email: (query) If set to true, sends invitation emails to all listed participants. (optional)

     - returns: RequestBuilder<Meeting> 
     */
    open class func createMeetingWithRequestBuilder(userId: Int, meeting: ScheduleMeetingMinComp, personalMeeting: Bool? = nil, email: Bool? = nil) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/scheduled_meeting"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meeting)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "personal_meeting": personalMeeting, 
            "email": email
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Dialout via PSTN
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadDialout: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dialoutPstn(userId: Int, numericMeetingId: Int, payloadDialout: PayloadDialout, completion: @escaping ((_ data: DialoutPstn?,_ error: Error?) -> Void)) {
        dialoutPstnWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadDialout: payloadDialout).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Dialout via PSTN
     - POST /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/dialout/pstn
     - Places a PSTN call to a user to join meeting. **Note:** call this API using a meeting access token
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "connectionGuid" : "connectionGuid",
  "endpointGuid" : "endpointGuid"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadDialout: (body)  

     - returns: RequestBuilder<DialoutPstn> 
     */
    open class func dialoutPstnWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadDialout: PayloadDialout) -> RequestBuilder<DialoutPstn> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/dialout/pstn"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadDialout)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<DialoutPstn>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Generate Pairing Code (PSTN)
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodePstn: (body)  
     - parameter role: (query)  (optional, default to USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generatePairingCodePstn(userId: Int, numericMeetingId: Int, payloadPairingCodePstn: PayloadPairingCodePstn, role: String? = nil, completion: @escaping ((_ data: PairingCodePSTN?,_ error: Error?) -> Void)) {
        generatePairingCodePstnWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadPairingCodePstn: payloadPairingCodePstn, role: role).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate Pairing Code (PSTN)
     - POST /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/PSTN
     - This endpoint generates a PSTN pairing code that can be used to connect to a meeting via telephone. **Note:** call this API using a meeting access token
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "seamEndpointGuid" : "seamEndpointGuid",
  "connectionGuid" : "connectionGuid",
  "endpointName" : "endpointName",
  "pairingCode" : "pairingCode"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodePstn: (body)  
     - parameter role: (query)  (optional, default to USER)

     - returns: RequestBuilder<PairingCodePSTN> 
     */
    open class func generatePairingCodePstnWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadPairingCodePstn: PayloadPairingCodePstn, role: String? = nil) -> RequestBuilder<PairingCodePSTN> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/PSTN"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadPairingCodePstn)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": role
        ])

        let requestBuilder: RequestBuilder<PairingCodePSTN>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Generate Pairing Code (SIP)
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodeSIP: (body) Information about the device that will be joining via SIP. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generatePairingCodeSip(userId: Int, numericMeetingId: Int, payloadPairingCodeSIP: PayloadPairingCodeSIP, completion: @escaping ((_ data: PairingCodeSIP?,_ error: Error?) -> Void)) {
        generatePairingCodeSipWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadPairingCodeSIP: payloadPairingCodeSIP).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate Pairing Code (SIP)
     - POST /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/SIP
     - This endpoint generates a SIP pairing code that can be used to connect to a meeting. **Note:** call this API using a meeting access token
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "seamEndpointGuid" : "seamEndpointGuid",
  "turnservers" : [ {
    "urls" : "urls",
    "credential" : "credential",
    "username" : "username"
  }, {
    "urls" : "urls",
    "credential" : "credential",
    "username" : "username"
  } ],
  "endpointGuid" : "endpointGuid",
  "connectionGuid" : "connectionGuid",
  "forceTURN" : true,
  "pairingCode" : "pairingCode",
  "uri" : "uri"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodeSIP: (body) Information about the device that will be joining via SIP. 

     - returns: RequestBuilder<PairingCodeSIP> 
     */
    open class func generatePairingCodeSipWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadPairingCodeSIP: PayloadPairingCodeSIP) -> RequestBuilder<PairingCodeSIP> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/SIP"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadPairingCodeSIP)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<PairingCodeSIP>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Generate Pairing Code (WebRTC)
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodeWebRTC: (body)  
     - parameter role: (query)  (optional, default to USER)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generatePairingCodeWebRtc(userId: Int, numericMeetingId: Int, payloadPairingCodeWebRTC: PayloadPairingCodeWebRTC, role: String? = nil, completion: @escaping ((_ data: PairingCodeWebRTC?,_ error: Error?) -> Void)) {
        generatePairingCodeWebRtcWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadPairingCodeWebRTC: payloadPairingCodeWebRTC, role: role).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generate Pairing Code (WebRTC)
     - POST /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/webrtc
     - This endpoint generates a WebRTC pairing code that can be used to connect to a meeting. **Note:** call this API using a meeting access token
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "seamEndpointGuid" : "seamEndpointGuid",
  "turnservers" : [ {
    "urls" : "urls",
    "credential" : "credential",
    "username" : "username"
  }, {
    "urls" : "urls",
    "credential" : "credential",
    "username" : "username"
  } ],
  "statusText" : "OK",
  "endpointGuid" : "endpointGuid",
  "connectionGuid" : "connectionGuid",
  "callguid" : "callguid",
  "endpointName" : "endpointName",
  "forceTURN" : true,
  "pairingCode" : "pairingCode",
  "uri" : "uri",
  "status" : 0
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadPairingCodeWebRTC: (body)  
     - parameter role: (query)  (optional, default to USER)

     - returns: RequestBuilder<PairingCodeWebRTC> 
     */
    open class func generatePairingCodeWebRtcWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadPairingCodeWebRTC: PayloadPairingCodeWebRTC, role: String? = nil) -> RequestBuilder<PairingCodeWebRTC> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/pairing_code/webrtc"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadPairingCodeWebRTC)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": role
        ])

        let requestBuilder: RequestBuilder<PairingCodeWebRTC>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Endpoint Layout
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEndpointLayout(userId: Int, numericMeetingId: Int, endpointGuid: String, completion: @escaping ((_ data: Layout?,_ error: Error?) -> Void)) {
        getEndpointLayoutWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, endpointGuid: endpointGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Endpoint Layout
     - GET /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}/layout
     - This endpoint allows you to retrieve an individual endpoint’s current layout setting.  Can use either of a general or meeting access token.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "layoutMode" : "Video",
  "subLayoutMode" : "VideoContiniousPresence"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 

     - returns: RequestBuilder<Layout> 
     */
    open class func getEndpointLayoutWithRequestBuilder(userId: Int, numericMeetingId: Int, endpointGuid: String) -> RequestBuilder<Layout> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}/layout"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let endpointGuidPreEscape = "\(endpointGuid)"
        let endpointGuidPostEscape = endpointGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{endpoint_guid}", with: endpointGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Layout>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Meeting
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. This is not the numeric meeting ID visible to users. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeeting(userId: Int, meetingId: Int, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        getMeetingWithRequestBuilder(userId: userId, meetingId: meetingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting
     - GET /v1/user/{user_id}/scheduled_meeting/{meeting_id}
     - This endpoint gets the settings for a user's meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. This is not the numeric meeting ID visible to users. 

     - returns: RequestBuilder<Meeting> 
     */
    open class func getMeetingWithRequestBuilder(userId: Int, meetingId: Int) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getMeetingEmails: String { 
        case text = "TEXT"
        case ics = "ICS"
        case html = "HTML"
    }

    /**
     * enum for parameter role
     */
    public enum Role_getMeetingEmails: String { 
        case moderator = "moderator"
        case participant = "participant"
    }

    /**
     * enum for parameter action
     */
    public enum Action_getMeetingEmails: String { 
        case create = "create"
        case edit = "edit"
        case delete = "delete"
    }

    /**
     Get Meeting Email
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter type: (query) TEXT, ICS, HTML (optional)
     - parameter role: (query) moderator, participant (optional)
     - parameter action: (query) create, edit, delete (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingEmails(userId: Int, meetingId: Int, type: ModelType_getMeetingEmails? = nil, role: Role_getMeetingEmails? = nil, action: Action_getMeetingEmails? = nil, completion: @escaping ((_ data: MeetingEmails?,_ error: Error?) -> Void)) {
        getMeetingEmailsWithRequestBuilder(userId: userId, meetingId: meetingId, type: type, role: role, action: action).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting Email
     - GET /v1/user/{user_id}/scheduled_meeting/{meeting_id}/emails
     - This endpoint retrieves the email object for a scheduled meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "moderator" : {
    "create" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    },
    "update" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    },
    "delete" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    }
  },
  "participant" : {
    "create" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    },
    "update" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    },
    "delete" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    },
    "inmeeting" : {
      "ICS_FILE" : "ICS_FILE",
      "ICS" : "ICS",
      "Text" : "Text",
      "HTML" : "HTML"
    }
  }
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter type: (query) TEXT, ICS, HTML (optional)
     - parameter role: (query) moderator, participant (optional)
     - parameter action: (query) create, edit, delete (optional)

     - returns: RequestBuilder<MeetingEmails> 
     */
    open class func getMeetingEmailsWithRequestBuilder(userId: Int, meetingId: Int, type: ModelType_getMeetingEmails? = nil, role: Role_getMeetingEmails? = nil, action: Action_getMeetingEmails? = nil) -> RequestBuilder<MeetingEmails> {
        var path = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}/emails"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.rawValue, 
            "role": role?.rawValue, 
            "action": action?.rawValue
        ])

        let requestBuilder: RequestBuilder<MeetingEmails>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Endpoint Information
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingEndpoint(userId: Int, numericMeetingId: Int, endpointGuid: String, completion: @escaping ((_ data: Endpoint?,_ error: Error?) -> Void)) {
        getMeetingEndpointWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, endpointGuid: endpointGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Endpoint Information
     - GET /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}
     - This endpoint allows you to retrieve information about an endpoint in the meeting.  Can use either of a general or meeting access token.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "VideoRtcpRelay" : "VideoRtcpRelay",
  "VideoCapID" : "VideoCapID",
  "VideoRecv" : "VideoRecv",
  "VideoRtcpTranspor" : "VideoRtcpTranspor",
  "AudioRecvLocalMute" : "AudioRecvLocalMute",
  "sessionid" : "sessionid",
  "ProxyInfo" : "ProxyInfo",
  "content.remote.address" : "content.remote.address",
  "AudioRecv" : "AudioRecv",
  "VideoRecvLocalMute" : "VideoRecvLocalMute",
  "SubLayout" : "SubLayout",
  "AudioRtpTransport" : "AudioRtpTransport",
  "VideoRecvHeight" : "VideoRecvHeight",
  "isInRoster" : true,
  "VideoRtpRelay" : "VideoRtpRelay",
  "ContentRtcpRelay" : "ContentRtcpRelay",
  "BondedAudioGuid" : "BondedAudioGuid",
  "SessionOut" : "SessionOut",
  "pairedremoteaddress" : "pairedremoteaddress",
  "meetingid" : "meetingid",
  "RelayNodeId" : "RelayNodeId",
  "ContentRecvLocalMute" : "ContentRecvLocalMute",
  "version" : "version",
  "localaddress" : "localaddress",
  "VideoDrop" : "VideoDrop",
  "CallQuality" : "CallQuality",
  "BondedVideoGuid" : "BondedVideoGuid",
  "EndpointCpuParams" : "EndpointCpuParams",
  "Id" : "Id",
  "BondedVideoName" : "BondedVideoName",
  "video.local.rtcpAddress" : "video.local.rtcpAddress",
  "AudioRtpRelay" : "AudioRtpRelay",
  "RemoteConnectionCount" : "RemoteConnectionCount",
  "AudioCapSelectID" : "AudioCapSelectID",
  "Leader" : "Leader",
  "VideoSendWidth" : "VideoSendWidth",
  "ContentRtpRelay" : "ContentRtpRelay",
  "endpoint" : "endpoint",
  "vendor" : "vendor",
  "conaddress" : "conaddress",
  "callguid" : "callguid",
  "ContentRtpTransport" : "ContentRtpTransport",
  "VideoSendCodec" : "VideoSendCodec",
  "RDCControllerCapable" : "RDCControllerCapable",
  "content.remote.rtcpAddress" : "content.remote.rtcpAddress",
  "mixaddress" : "mixaddress",
  "connecttime" : "connecttime",
  "VideoSend" : "VideoSend",
  "audio.remote.rtcpAddress" : "audio.remote.rtcpAddress",
  "CallQualitySend" : "CallQualitySend",
  "locales" : "locales",
  "VideoRecvCodec" : "VideoRecvCodec",
  "Layout" : "Layout",
  "audio.remote.address" : "audio.remote.address",
  "medaddress" : "medaddress",
  "AudioRtcpRelay" : "AudioRtcpRelay",
  "MovieCapable" : "MovieCapable",
  "MixerGuid" : "MixerGuid",
  "ParticipantDTMFMenus" : "ParticipantDTMFMenus",
  "ContentRtcpTransport" : "ContentRtcpTransport",
  "AudioPlayID" : "AudioPlayID",
  "VideoRecvRemoteMute" : "VideoRecvRemoteMute",
  "RDCVersion" : "RDCVersion",
  "SessionIn" : "SessionIn",
  "BJNUserId" : "BJNUserId",
  "SessionRelay" : "SessionRelay",
  "CallQualityRecv" : "CallQualityRecv",
  "VideoRtpTransport" : "VideoRtpTransport",
  "video.remote.address" : "video.remote.address",
  "AudioRecvRemoteMute" : "AudioRecvRemoteMute",
  "audio.local.rtcpAddress" : "audio.local.rtcpAddress",
  "visibility" : "visibility",
  "content.local.address" : "content.local.address",
  "SessionInRelay" : "SessionInRelay",
  "AudioRtcpTransport" : "AudioRtcpTransport",
  "MeetingInfoMode" : "MeetingInfoMode",
  "localName" : "localName",
  "meetingjointime" : "meetingjointime",
  "TalkDetected" : "TalkDetected",
  "VideoSendHeight" : "VideoSendHeight",
  "ContentSend" : "ContentSend",
  "name" : "name",
  "creationtime" : "creationtime",
  "VideoRecvWidth" : "VideoRecvWidth",
  "audio.local.address" : "audio.local.address",
  "SIPHTTPProxyTransport" : "SIPHTTPProxyTransport",
  "SecureCall" : "SecureCall",
  "RDCControlleeCapable" : "RDCControlleeCapable",
  "callhostname" : "callhostname",
  "mhaddress" : "mhaddress",
  "SessionOutRelay" : "SessionOutRelay",
  "AudioCapID" : "AudioCapID",
  "EcMode" : "EcMode",
  "CountryCode" : "CountryCode",
  "AudioPlayName" : "AudioPlayName",
  "ContentRecvCodec" : "ContentRecvCodec",
  "video.remote.rtcpAddress" : "video.remote.rtcpAddress",
  "AudioSendCodec" : "AudioSendCodec",
  "ContentRecv" : "ContentRecv",
  "transport" : "transport",
  "content.local.rtcpAddress" : "content.local.rtcpAddress",
  "AudioSend" : "AudioSend",
  "MeetingGuid" : "MeetingGuid",
  "remoteaddress" : "remoteaddress",
  "HtmlLayoutGuid" : "HtmlLayoutGuid",
  "pairedname" : "pairedname",
  "ContentRelayServer" : "ContentRelayServer",
  "AudioCapName" : "AudioCapName",
  "video.local.address" : "video.local.address",
  "callrate" : "callrate",
  "AudioRecvCodec" : "AudioRecvCodec"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 

     - returns: RequestBuilder<Endpoint> 
     */
    open class func getMeetingEndpointWithRequestBuilder(userId: Int, numericMeetingId: Int, endpointGuid: String) -> RequestBuilder<Endpoint> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let endpointGuidPreEscape = "\(endpointGuid)"
        let endpointGuidPostEscape = endpointGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{endpoint_guid}", with: endpointGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Endpoint>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List Meeting Endpoints
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingEndpoints(userId: Int, numericMeetingId: Int, completion: @escaping ((_ data: Endpoints?,_ error: Error?) -> Void)) {
        getMeetingEndpointsWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Meeting Endpoints
     - GET /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints
     - This endpoint returns an array of all endpoints in the current meeting.  Can use either of a general or meeting access token.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 

     - returns: RequestBuilder<Endpoints> 
     */
    open class func getMeetingEndpointsWithRequestBuilder(userId: Int, numericMeetingId: Int) -> RequestBuilder<Endpoints> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Endpoints>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Meeting Join Info
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingNumbers(userId: Int, meetingId: Int, completion: @escaping ((_ data: Numbers?,_ error: Error?) -> Void)) {
        getMeetingNumbersWithRequestBuilder(userId: userId, meetingId: meetingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting Join Info
     - GET /v1/user/{user_id}/meetings/{meeting_id}/numbers
     - This endpoint retrieves the join information for a scheduled meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "allowDirectDial" : true,
  "partnerIntegratedMeeting" : true,
  "pstnNumbersUrl" : "pstnNumbersUrl",
  "precision" : "precision",
  "numbers" : [ {
    "number" : "number",
    "country" : "country",
    "default" : true,
    "premium" : true,
    "city" : "city",
    "custom" : true,
    "id" : 0,
    "countryName" : "countryName",
    "state" : "state",
    "label" : {
      "default" : "default"
    },
    "defaultSettingsInherited" : true,
    "tollfree" : true
  }, {
    "number" : "number",
    "country" : "country",
    "default" : true,
    "premium" : true,
    "city" : "city",
    "custom" : true,
    "id" : 0,
    "countryName" : "countryName",
    "state" : "state",
    "label" : {
      "default" : "default"
    },
    "defaultSettingsInherited" : true,
    "tollfree" : true
  } ],
  "meetingId" : "meetingId",
  "pstnLocalizationSupported" : true,
  "moderatorPasscode" : "moderatorPasscode",
  "useAttendeePasscode" : true
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 

     - returns: RequestBuilder<Numbers> 
     */
    open class func getMeetingNumbersWithRequestBuilder(userId: Int, meetingId: Int) -> RequestBuilder<Numbers> {
        var path = "/v1/user/{user_id}/meetings/{meeting_id}/numbers"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Numbers>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Meeting State
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingState(userId: Int, numericMeetingId: Int, completion: @escaping ((_ data: MeetingState?,_ error: Error?) -> Void)) {
        getMeetingStateWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting State
     - GET /v1/user/{user_id}/live_meetings/{numeric_meeting_id}
     - This endpoint’s purpose is to return whether the meeting is in progress or not.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "isContentSharingActive" : true,
  "isLargeMeeting" : "isLargeMeeting",
  "pinnedEndpointGuid" : "pinnedEndpointGuid",
  "recordingEnabled" : true,
  "meetingMarkedForDelayedTermination" : true,
  "meetingId" : "meetingId",
  "audioMuteOnEntry" : true,
  "moderatorLess" : true,
  "title" : "title",
  "chatEnabled" : true,
  "participantWebJoinURL" : "participantWebJoinURL",
  "audioEndpointCount" : 0,
  "features" : [ "features", "features" ],
  "smStreams" : "smStreams",
  "videoMuteOnEntry" : true,
  "meetingGuid" : "meetingGuid",
  "videoEndpointCount" : 6,
  "delayedMeetingEndTime" : 1,
  "recordinginfo" : {
    "recordingStartTime" : 5,
    "active" : true,
    "recorded" : true,
    "contentStatus" : "contentStatus"
  },
  "bridged" : true,
  "inactiveMeetingStatus" : "inactiveMeetingStatus",
  "meetingState" : "MeetingStarted",
  "locked" : true,
  "status" : "active"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 

     - returns: RequestBuilder<MeetingState> 
     */
    open class func getMeetingStateWithRequestBuilder(userId: Int, numericMeetingId: Int) -> RequestBuilder<MeetingState> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingState>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List Meetings
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (query) Filter the results by the meeting ID that participants will see and use to join the conference. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMeetings(userId: Int, numericMeetingId: String? = nil, completion: @escaping ((_ data: [Meeting]?,_ error: Error?) -> Void)) {
        listMeetingsWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Meetings
     - GET /v1/user/{user_id}/scheduled_meeting
     - This endpoint gets a list of the user's scheduled upcoming meetings.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}, {
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
} ]}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (query) Filter the results by the meeting ID that participants will see and use to join the conference. (optional)

     - returns: RequestBuilder<[Meeting]> 
     */
    open class func listMeetingsWithRequestBuilder(userId: Int, numericMeetingId: String? = nil) -> RequestBuilder<[Meeting]> {
        var path = "/v1/user/{user_id}/scheduled_meeting"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "numericMeetingId": numericMeetingId
        ])

        let requestBuilder: RequestBuilder<[Meeting]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send Email Invite
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadInvite: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendMeetingInvite(userId: Int, numericMeetingId: Int, payloadInvite: PayloadInvite, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendMeetingInviteWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadInvite: payloadInvite).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Send Email Invite
     - POST /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/invite
     - This endpoint generates an email invite to the specified meeting. **Note:** call this API using a meeting access token
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadInvite: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func sendMeetingInviteWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadInvite: PayloadInvite) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/invite"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadInvite)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Endpoint Layout
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter layout: (body) Specifies the video layout format. 
     - parameter isLeader: (query)  (optional)
     - parameter push: (query) Push these changes to all participants.  Requires Meeting access token with moderator privileges. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEndpointLayout(userId: Int, numericMeetingId: Int, endpointGuid: String, layout: Layout, isLeader: Bool? = nil, push: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateEndpointLayoutWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, endpointGuid: endpointGuid, layout: layout, isLeader: isLeader, push: push).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Endpoint Layout
     - PUT /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}/layout
     - This endpoint allows you to update an individual endpoint’s current layout setting. Requires Meeting access token with moderator privileges
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter layout: (body) Specifies the video layout format. 
     - parameter isLeader: (query)  (optional)
     - parameter push: (query) Push these changes to all participants.  Requires Meeting access token with moderator privileges. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateEndpointLayoutWithRequestBuilder(userId: Int, numericMeetingId: Int, endpointGuid: String, layout: Layout, isLeader: Bool? = nil, push: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}/layout"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let endpointGuidPreEscape = "\(endpointGuid)"
        let endpointGuidPostEscape = endpointGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{endpoint_guid}", with: endpointGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: layout)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isLeader": isLeader, 
            "push": push
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Meeting
     
     - parameter userId: (path) The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter meeting: (body) The user&#39;s room details that you wish to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeeting(userId: Int, meetingId: Int, meeting: Meeting, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        updateMeetingWithRequestBuilder(userId: userId, meetingId: meetingId, meeting: meeting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Meeting
     - PUT /v1/user/{user_id}/scheduled_meeting/{meeting_id}
     - This endpoint changes the settings for a user's meeting. For example, use for rescheduling.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter meeting: (body) The user&#39;s room details that you wish to update. 

     - returns: RequestBuilder<Meeting> 
     */
    open class func updateMeetingWithRequestBuilder(userId: Int, meetingId: Int, meeting: Meeting) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/scheduled_meeting/{meeting_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: meeting)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update Endpoint Video/Audio State
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter muteAudio: (query) Toggle the audio source mute. (optional)
     - parameter muteVideo: (query) Toggle the video source mute. (optional)
     - parameter leaveMeeting: (query) Remove the user from the meeting. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeetingEndpoint(userId: Int, numericMeetingId: Int, endpointGuid: String, muteAudio: Bool? = nil, muteVideo: Bool? = nil, leaveMeeting: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateMeetingEndpointWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, endpointGuid: endpointGuid, muteAudio: muteAudio, muteVideo: muteVideo, leaveMeeting: leaveMeeting).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Endpoint Video/Audio State
     - PUT /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}
     - This endpoint allows you to update an individual endpoint’s ability to send audio or video, and also allows removing an endpoint from the meeting. Requires Meeting access token with moderator privileges
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter endpointGuid: (path) The GUID of an endpoint.  Usually retrieved from the List Meeting Endpoints endpoint. 
     - parameter muteAudio: (query) Toggle the audio source mute. (optional)
     - parameter muteVideo: (query) Toggle the video source mute. (optional)
     - parameter leaveMeeting: (query) Remove the user from the meeting. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateMeetingEndpointWithRequestBuilder(userId: Int, numericMeetingId: Int, endpointGuid: String, muteAudio: Bool? = nil, muteVideo: Bool? = nil, leaveMeeting: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints/{endpoint_guid}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let endpointGuidPreEscape = "\(endpointGuid)"
        let endpointGuidPostEscape = endpointGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{endpoint_guid}", with: endpointGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "muteAudio": muteAudio, 
            "muteVideo": muteVideo, 
            "leaveMeeting": leaveMeeting
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter media
     */
    public enum Media_updateMeetingEndpoints: String { 
        case audio = "audio"
        case video = "video"
    }

    /**
     Update Meeting Endpoints State
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter mute: (query) Allows you to mute/unmute all participants in a meeting. Set mute to true to mute.  Set mute to false to unmute. (optional)
     - parameter media: (query) Specify the type of media you which to mute/unmute. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeetingEndpoints(userId: Int, numericMeetingId: Int, mute: Bool? = nil, media: Media_updateMeetingEndpoints? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateMeetingEndpointsWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, mute: mute, media: media).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Meeting Endpoints State
     - PUT /v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints
     - This endpoint’s purpose is to be able to modify the endpoints in a meeting. Requires Meeting access token with moderator privileges
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter mute: (query) Allows you to mute/unmute all participants in a meeting. Set mute to true to mute.  Set mute to false to unmute. (optional)
     - parameter media: (query) Specify the type of media you which to mute/unmute. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateMeetingEndpointsWithRequestBuilder(userId: Int, numericMeetingId: Int, mute: Bool? = nil, media: Media_updateMeetingEndpoints? = nil) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}/endpoints"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "mute": mute, 
            "media": media?.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Meeting State
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadMeetingState: (body) The meeting properties that you wish to update. 
     - parameter delay: (query) Number of seconds to delay the end meeting operation. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeetingState(userId: Int, numericMeetingId: Int, payloadMeetingState: PayloadMeetingState, delay: Int? = nil, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        updateMeetingStateWithRequestBuilder(userId: userId, numericMeetingId: numericMeetingId, payloadMeetingState: payloadMeetingState, delay: delay).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Meeting State
     - PUT /v1/user/{user_id}/live_meetings/{numeric_meeting_id}
     - This endpoint’s purpose is to be able to modify a meeting. Actions include locking the meeting, or terminating the meeting.  This API requires a meeting access token with moderator privileges.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter numericMeetingId: (path) The meeting ID that participants will see and use to join the conference. When joining via phone, this is the code they enter via DTMF to join. 
     - parameter payloadMeetingState: (body) The meeting properties that you wish to update. 
     - parameter delay: (query) Number of seconds to delay the end meeting operation. (optional)

     - returns: RequestBuilder<Meeting> 
     */
    open class func updateMeetingStateWithRequestBuilder(userId: Int, numericMeetingId: Int, payloadMeetingState: PayloadMeetingState, delay: Int? = nil) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/live_meetings/{numeric_meeting_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let numericMeetingIdPreEscape = "\(numericMeetingId)"
        let numericMeetingIdPostEscape = numericMeetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{numeric_meeting_id}", with: numericMeetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: payloadMeetingState)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "delay": delay?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
