//
// AuthenticationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AuthenticationAPI {
    /**
     Get Authorization Code
     
     - parameter clientId: (query) The 32 character client ID generated when you created the client application. (optional)
     - parameter redirectUri: (query) The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)
     - parameter state: (query) Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)
     - parameter scope: (query) A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info, meeting_history, modify_user_info. Raise a support case with us if you wish to have more scopes supported. (optional)
     - parameter responseType: (query) The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)
     - parameter appName: (query) The name of the client application shown to user during authorization. (optional)
     - parameter appLogoUrl: (query) URL to an 84x84 image shown to user during authorization. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAuthorizationCode(clientId: String? = nil, redirectUri: String? = nil, state: String? = nil, scope: String? = nil, responseType: String? = nil, appName: String? = nil, appLogoUrl: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAuthorizationCodeWithRequestBuilder(clientId: clientId, redirectUri: redirectUri, state: state, scope: scope, responseType: responseType, appName: appName, appLogoUrl: appLogoUrl).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get Authorization Code
     - GET /oauth2/authorize
     - This is **not a true REST endpoint**. <br /> This URL should be used by a user's browser-client application to perform authorization. <br />This API call takes the user to a BlueJeans page that allows the user to login and approve application access.<br />Upon completion, the user will be redirected back to the client application with a code return value. <br />**Note**<ul><li>This API is activated through <b> https://bluejeans.com/oauth2/authorize </b></li><li>The API's return code has a very short valid period of <b>30 seconds</b>.</li><li>Your application must call the <b>/oauth2/token?Code</b> API as soon as possible to exchange the authorization code for an access token.</li></ul>
     
     - parameter clientId: (query) The 32 character client ID generated when you created the client application. (optional)
     - parameter redirectUri: (query) The URL where the authorization code will be returned via redirect.  The URL must match a URL registered with the client application. (optional)
     - parameter state: (query) Client application specific state passed through and returned in the redirect URL. May be useful for identifying operations or users. (optional)
     - parameter scope: (query) A comma delimited list of scopes requested. Scopes may be list_meetings, modify_meetings, user_info, meeting_history, modify_user_info. Raise a support case with us if you wish to have more scopes supported. (optional)
     - parameter responseType: (query) The type of authorization you are peforrming.  Set to \&quot;code\&quot;. (optional, default to code)
     - parameter appName: (query) The name of the client application shown to user during authorization. (optional)
     - parameter appLogoUrl: (query) URL to an 84x84 image shown to user during authorization. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getAuthorizationCodeWithRequestBuilder(clientId: String? = nil, redirectUri: String? = nil, state: String? = nil, scope: String? = nil, responseType: String? = nil, appName: String? = nil, appLogoUrl: String? = nil) -> RequestBuilder<Void> {
        let path = "/oauth2/authorize"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "clientId": clientId, 
            "redirectUri": redirectUri, 
            "state": state, 
            "scope": scope, 
            "responseType": responseType, 
            "appName": appName, 
            "appLogoUrl": appLogoUrl
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Authenticate application using client ID and secret
     
     - parameter grantRequestClient: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *client_credentials*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenByClient(grantRequestClient: GrantRequestClient, completion: @escaping ((_ data: GrantClient?,_ error: Error?) -> Void)) {
        getTokenByClientWithRequestBuilder(grantRequestClient: grantRequestClient).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticate application using client ID and secret
     - POST /oauth2/token#Application
     - This API is typically called from an application that needs to make API requests.  The values for the calling parameters, Client ID, and Secret, are provisioned within the BlueJeans Enterprise Administration console.  A BlueJeans administrator must generate these parameters and provide them to the customer/developer. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**client_credentials**\" (string).
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scope" : {
    "partitionName" : "partitionName",
    "partition" : {
      "name" : "name",
      "id" : 1
    },
    "enterprise" : 6
  },
  "expires_in" : 0
}}]
     
     - parameter grantRequestClient: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *client_credentials*. 

     - returns: RequestBuilder<GrantClient> 
     */
    open class func getTokenByClientWithRequestBuilder(grantRequestClient: GrantRequestClient) -> RequestBuilder<GrantClient> {
        let path = "/oauth2/token#Application"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantRequestClient)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GrantClient>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authenticate 3-legged using OAuth code
     
     - parameter grantRequestCode: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *authorization_code*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenByCode(grantRequestCode: GrantRequestCode, completion: @escaping ((_ data: GrantCode?,_ error: Error?) -> Void)) {
        getTokenByCodeWithRequestBuilder(grantRequestCode: grantRequestCode).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticate 3-legged using OAuth code
     - POST /oauth2/token#3Legged
     - This API is part of the 3-legged OAuth 2.0 authorization flow.  The user will be redirected here after successfully authorizing BlueJeans to grant the application access.  You must pass to this API the authorization code received from BlueJeans along with the applications OAuth client_id and secret keys.  Include as well a *success URL* to which the user will be redirected upon successful authentication. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**authorization_code**\" (string).
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "scope" : {
    "appPermissions" : [ {
      "method" : "method",
      "allowedRegex" : "allowedRegex"
    }, {
      "method" : "method",
      "allowedRegex" : "allowedRegex"
    } ],
    "partitionName" : "partitionName",
    "partition" : {
      "name" : "name",
      "id" : 1
    },
    "clientId" : "clientId",
    "bearerPermissions" : "bearerPermissions",
    "user" : 6
  },
  "expires_in" : 0
}}]
     
     - parameter grantRequestCode: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *authorization_code*. 

     - returns: RequestBuilder<GrantCode> 
     */
    open class func getTokenByCodeWithRequestBuilder(grantRequestCode: GrantRequestCode) -> RequestBuilder<GrantCode> {
        let path = "/oauth2/token#3Legged"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantRequestCode)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GrantCode>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authenticate meeting using meeting ID and passcode
     
     - parameter grantRequestMeeting: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *meeting_passcode*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenByMeeting(grantRequestMeeting: GrantRequestMeeting, completion: @escaping ((_ data: GrantMeeting?,_ error: Error?) -> Void)) {
        getTokenByMeetingWithRequestBuilder(grantRequestMeeting: grantRequestMeeting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticate meeting using meeting ID and passcode
     - POST /oauth2/token#Meeting
     - This API uses an OAuth-like grant/request method similar to the Password grant type.  The API returns an access token whose scope is limited to the meeting only. <br />Call this API with the meeting's numeric ID, and the meeting passcode (if one exists). <br />&nbsp;&nbsp;If you call the API with a Moderator passcode, moderator privileges are granted. <br />&nbsp;&nbsp;If an Attendee access code is passed, the access token will grant attendee abilities.<br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**meeting_passcode**\" (string).
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "scope" : {
    "partitionName" : "partitionName",
    "partition" : {
      "name" : "name",
      "id" : 1
    },
    "meeting" : {
      "isModerator" : true,
      "meetingNumericId" : "meetingNumericId",
      "meetingUri" : "meetingUri",
      "endpointUriSet" : [ "{}", "{}" ],
      "meetingId" : "meetingId",
      "id" : 6,
      "leaderId" : 1
    }
  },
  "expires_in" : 0
}}]
     
     - parameter grantRequestMeeting: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *meeting_passcode*. 

     - returns: RequestBuilder<GrantMeeting> 
     */
    open class func getTokenByMeetingWithRequestBuilder(grantRequestMeeting: GrantRequestMeeting) -> RequestBuilder<GrantMeeting> {
        let path = "/oauth2/token#Meeting"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantRequestMeeting)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GrantMeeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authenticate user using password
     
     - parameter grantRequestPassword: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *password*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenByPassword(grantRequestPassword: GrantRequestPassword, completion: @escaping ((_ data: GrantPassword?,_ error: Error?) -> Void)) {
        getTokenByPasswordWithRequestBuilder(grantRequestPassword: grantRequestPassword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Authenticate user using password
     - POST /oauth2/token#User
     - This API authenticates a user based upon a username and password. Call this API and provide a valid username and password. <br />**NOTE:** <br />&nbsp;&nbsp;When calling this API, you must set the field, **grant_type** to equal \"**password**\" (string).
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "scope" : {
    "partitionName" : "partitionName",
    "partition" : {
      "name" : "name",
      "id" : 1
    },
    "user" : 6
  },
  "expires_in" : 0
}}]
     
     - parameter grantRequestPassword: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *password*. 

     - returns: RequestBuilder<GrantPassword> 
     */
    open class func getTokenByPasswordWithRequestBuilder(grantRequestPassword: GrantRequestPassword) -> RequestBuilder<GrantPassword> {
        let path = "/oauth2/token#User"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantRequestPassword)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GrantPassword>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Refresh 3-legged using existing token
     
     - parameter grantRequestRefresh: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *refresh_token*. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenByRefresh(grantRequestRefresh: GrantRequestRefresh, completion: @escaping ((_ data: GrantRefresh?,_ error: Error?) -> Void)) {
        getTokenByRefreshWithRequestBuilder(grantRequestRefresh: grantRequestRefresh).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh 3-legged using existing token
     - POST /oauth2/token#Refresh_3Legged
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "access_token" : "access_token",
  "refresh_token" : "refresh_token",
  "scope" : {
    "appPermissions" : [ {
      "method" : "method",
      "allowedRegex" : "allowedRegex"
    }, {
      "method" : "method",
      "allowedRegex" : "allowedRegex"
    } ],
    "partitionName" : "partitionName",
    "partition" : {
      "name" : "name",
      "id" : 1
    },
    "bearerPermissions" : "bearerPermissions",
    "user" : 6
  },
  "expires_in" : 0
}}]
     
     - parameter grantRequestRefresh: (body) Contains information about the type of grant you are requesting.  **Remember**, the field *grant_type* must be set to *refresh_token*. 

     - returns: RequestBuilder<GrantRefresh> 
     */
    open class func getTokenByRefreshWithRequestBuilder(grantRequestRefresh: GrantRequestRefresh) -> RequestBuilder<GrantRefresh> {
        let path = "/oauth2/token#Refresh_3Legged"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantRequestRefresh)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<GrantRefresh>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Validate a token
     
     - parameter accessToken: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTokenInfo(accessToken: String? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getTokenInfoWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Validate a token
     - GET /oauth2/tokenInfo
     - This endpoint will determine if a token is valid or not. It works for all kinds of tokens. If the token is valid, it returns information about the token. The information returned depends on the token type.
     - examples: [{contentType=application/json, example={
  "user" : 0
}}]
     
     - parameter accessToken: (query)  (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getTokenInfoWithRequestBuilder(accessToken: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/oauth2/tokenInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Revoke a user, meeting, or application token
     
     - parameter accessToken: (query) The token to revoke (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeAccessToken(accessToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        revokeAccessTokenWithRequestBuilder(accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Revoke a user, meeting, or application token
     - DELETE /oauth2/token#Revoke
     - Invalidate tokens generated for a user, meeting, or application. <br />**NOTE:** This does not work for 3-legged tokens - see Revoke 3-Legged below.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter accessToken: (query) The token to revoke (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func revokeAccessTokenWithRequestBuilder(accessToken: String? = nil) -> RequestBuilder<Void> {
        let path = "/oauth2/token#Revoke"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Revoke 3-legged token
     
     - parameter revokeRequestOAuth: (body) Contains information about the type of grant you are revoking. 
     - parameter accessToken: (query) The token to revoke (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeAccessToken_0(revokeRequestOAuth: RevokeRequestOAuth, accessToken: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        revokeAccessToken_0WithRequestBuilder(revokeRequestOAuth: revokeRequestOAuth, accessToken: accessToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Revoke 3-legged token
     - DELETE /oauth2/token#Revoke_3Legged
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter revokeRequestOAuth: (body) Contains information about the type of grant you are revoking. 
     - parameter accessToken: (query) The token to revoke (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func revokeAccessToken_0WithRequestBuilder(revokeRequestOAuth: RevokeRequestOAuth, accessToken: String? = nil) -> RequestBuilder<Void> {
        let path = "/oauth2/token#Revoke_3Legged"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: revokeRequestOAuth)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "access_token": accessToken
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
