//
// HistoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class HistoryAPI {
    /**
     Get Meeting History by Enterprise
     
     - parameter enterpriseId: (path) The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHistoryByEnterprise(enterpriseId: Int, meetingGuid: String, completion: @escaping ((_ data: MeetingHistory?,_ error: Error?) -> Void)) {
        getHistoryByEnterpriseWithRequestBuilder(enterpriseId: enterpriseId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting History by Enterprise
     - GET /v1/enterprise/{enterprise_id}/meeting_history/{meeting_guid}
     - This endpoint retrieves the meeting history for a specific instance of a meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
}}]
     
     - parameter enterpriseId: (path) The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 

     - returns: RequestBuilder<MeetingHistory> 
     */
    open class func getHistoryByEnterpriseWithRequestBuilder(enterpriseId: Int, meetingGuid: String) -> RequestBuilder<MeetingHistory> {
        var path = "/v1/enterprise/{enterprise_id}/meeting_history/{meeting_guid}"
        let enterpriseIdPreEscape = "\(enterpriseId)"
        let enterpriseIdPostEscape = enterpriseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise_id}", with: enterpriseIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_guid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingHistory>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Meeting History by User
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHistoryByUser(userId: Int, meetingGuid: String, completion: @escaping ((_ data: MeetingHistory?,_ error: Error?) -> Void)) {
        getHistoryByUserWithRequestBuilder(userId: userId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting History by User
     - GET /v1/user/{user_id}/meeting_history/{meeting_guid}
     - This endpoint retrieves the meeting history for a specific instance of a meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 

     - returns: RequestBuilder<MeetingHistory> 
     */
    open class func getHistoryByUserWithRequestBuilder(userId: Int, meetingGuid: String) -> RequestBuilder<MeetingHistory> {
        var path = "/v1/user/{user_id}/meeting_history/{meeting_guid}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_guid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingHistory>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Meeting History Sharing by User
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHistorySharingByUser(userId: Int, meetingGuid: String, completion: @escaping ((_ data: MeetingHistorySharing?,_ error: Error?) -> Void)) {
        getHistorySharingByUserWithRequestBuilder(userId: userId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Meeting History Sharing by User
     - GET /v1/user/{user_id}/meeting_history/{meeting_guid}/sharing
     - This endpoint retrieves the meeting history sharing for a specific instance of a meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "downloadable" : true,
  "meetingGuid" : "meetingGuid",
  "created" : 1,
  "lastmodified" : 5,
  "id" : 0,
  "validity" : "validity",
  "ownerId" : 6,
  "sharingUrl" : "sharingUrl",
  "recepientType" : "ENTERPRISE",
  "properties" : "properties",
  "passcode" : "passcode",
  "status" : "ACTIVE"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 

     - returns: RequestBuilder<MeetingHistorySharing> 
     */
    open class func getHistorySharingByUserWithRequestBuilder(userId: Int, meetingGuid: String) -> RequestBuilder<MeetingHistorySharing> {
        var path = "/v1/user/{user_id}/meeting_history/{meeting_guid}/sharing"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_guid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingHistorySharing>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Recording
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter recordingEntityId: (path) The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecording(userId: Int, recordingEntityId: Int, completion: @escaping ((_ data: Recording?,_ error: Error?) -> Void)) {
        getRecordingWithRequestBuilder(userId: userId, recordingEntityId: recordingEntityId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Recording
     - GET /v1/user/{user_id}/meeting_history/recordings/{recording_entity_id}
     - This endpoint retrieves the details about a meeting recording.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "totalDuration" : 5,
  "recordingChapters" : [ {
    "parentRecordingId" : 1,
    "endTimeOffset" : 2,
    "totalSize" : 4,
    "compositeContentStatus" : "compositeContentStatus",
    "chapterId" : "chapterId",
    "chapterName" : "chapterName",
    "compositeContentId" : 7,
    "id" : 9,
    "viewCount" : 1,
    "startTimeOffset" : 3,
    "recordingSessions" : [ {
      "duration" : 4,
      "endTimeOffset" : 1,
      "recordingType" : "recordingType",
      "startedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "stoppedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "contentId" : 6,
      "id" : 1,
      "startTimeOffset" : 7,
      "contentStatus" : "contentStatus",
      "thumbnailUrl" : "thumbnailUrl"
    }, {
      "duration" : 4,
      "endTimeOffset" : 1,
      "recordingType" : "recordingType",
      "startedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "stoppedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "contentId" : 6,
      "id" : 1,
      "startTimeOffset" : 7,
      "contentStatus" : "contentStatus",
      "thumbnailUrl" : "thumbnailUrl"
    } ]
  }, {
    "parentRecordingId" : 1,
    "endTimeOffset" : 2,
    "totalSize" : 4,
    "compositeContentStatus" : "compositeContentStatus",
    "chapterId" : "chapterId",
    "chapterName" : "chapterName",
    "compositeContentId" : 7,
    "id" : 9,
    "viewCount" : 1,
    "startTimeOffset" : 3,
    "recordingSessions" : [ {
      "duration" : 4,
      "endTimeOffset" : 1,
      "recordingType" : "recordingType",
      "startedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "stoppedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "contentId" : 6,
      "id" : 1,
      "startTimeOffset" : 7,
      "contentStatus" : "contentStatus",
      "thumbnailUrl" : "thumbnailUrl"
    }, {
      "duration" : 4,
      "endTimeOffset" : 1,
      "recordingType" : "recordingType",
      "startedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "stoppedBy" : {
        "endpointGuid" : "endpointGuid",
        "endpointName" : "endpointName"
      },
      "contentId" : 6,
      "id" : 1,
      "startTimeOffset" : 7,
      "contentStatus" : "contentStatus",
      "thumbnailUrl" : "thumbnailUrl"
    } ]
  } ],
  "created" : 2,
  "recordingName" : "recordingName",
  "chapterCount" : 6,
  "aggregatedViewCount" : 7,
  "recordingEntityId" : 0,
  "recordingEntityGuid" : "recordingEntityGuid",
  "isPremiumRecording" : true,
  "totalSize" : 1,
  "recordingThumbnail" : "recordingThumbnail",
  "meetingGuid" : "meetingGuid",
  "showPremiumRecordingTag" : true,
  "lastRecordingDate" : 5,
  "aggregatedStatus" : "aggregatedStatus"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter recordingEntityId: (path) The ID of the meeting recording. This value is shown in meeting recording lists as recordingEntityId. 

     - returns: RequestBuilder<Recording> 
     */
    open class func getRecordingWithRequestBuilder(userId: Int, recordingEntityId: Int) -> RequestBuilder<Recording> {
        var path = "/v1/user/{user_id}/meeting_history/recordings/{recording_entity_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let recordingEntityIdPreEscape = "\(recordingEntityId)"
        let recordingEntityIdPostEscape = recordingEntityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recording_entity_id}", with: recordingEntityIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Recording>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List History by Enterprise
     
     - parameter enterpriseId: (path) The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listHistoryByEnterprise(enterpriseId: Int, completion: @escaping ((_ data: [MeetingHistory]?,_ error: Error?) -> Void)) {
        listHistoryByEnterpriseWithRequestBuilder(enterpriseId: enterpriseId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List History by Enterprise
     - GET /v1/enterprise/{enterprise_id}/meeting_history
     - This endpoint retrieves a list of meeting histories by the given enterprise.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
}, {
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
} ]}]
     
     - parameter enterpriseId: (path) The ID of the enterprise of interest. This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 

     - returns: RequestBuilder<[MeetingHistory]> 
     */
    open class func listHistoryByEnterpriseWithRequestBuilder(enterpriseId: Int) -> RequestBuilder<[MeetingHistory]> {
        var path = "/v1/enterprise/{enterprise_id}/meeting_history"
        let enterpriseIdPreEscape = "\(enterpriseId)"
        let enterpriseIdPostEscape = enterpriseIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{enterprise_id}", with: enterpriseIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<[MeetingHistory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List History by User
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (query) Return only meetings with the specified meeting numeric ID. (optional)
     - parameter startDate: (query) Return meetings starting from the specified date. MM/DD/YYYY (optional)
     - parameter endDate: (query) Return meetings up until the specified date. MM/DD/YYYY (optional)
     - parameter pageSize: (query) Sets number of items returned per page. (optional)
     - parameter pageNumber: (query) Selects which page of results to return. (optional)
     - parameter order: (query) Puts results in ascending or descending order. asc/desc (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listHistoryByUser(userId: Int, meetingId: String? = nil, startDate: String? = nil, endDate: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, order: String? = nil, completion: @escaping ((_ data: [MeetingHistory]?,_ error: Error?) -> Void)) {
        listHistoryByUserWithRequestBuilder(userId: userId, meetingId: meetingId, startDate: startDate, endDate: endDate, pageSize: pageSize, pageNumber: pageNumber, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List History by User
     - GET /v1/user/{user_id}/meeting_history
     - This endpoint retrieves a list of meeting histories by the given user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
}, {
  "totalParticipantMinutes" : 5,
  "callDIDMinutes" : 4,
  "meetingStatus" : "Complete",
  "description" : "description",
  "uploadStatus" : "uploadStatus",
  "totalDialoutMinutes" : 3,
  "meetingThumbnail" : "meetingThumbnail",
  "title" : "title",
  "pstnonly" : true,
  "meetingDuration" : 1,
  "participantList" : [ {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  }, {
    "deviceType" : "Carmel",
    "participantGuid" : "participantGuid",
    "isModerator" : true,
    "joinTime" : 1,
    "minutes" : 1,
    "disconnectTime" : 6,
    "isEncrypted" : true,
    "endpointName" : "endpointName",
    "userId" : 7,
    "email" : "email",
    "remoteAddress" : "remoteAddress",
    "tags" : "tags"
  } ],
  "isdnEndpoints" : 9,
  "extraParticipantMinutes" : 7,
  "concurrentCalls" : "concurrentCalls",
  "meetingNumericId" : "meetingNumericId",
  "maxParticipantMinutes" : 2,
  "startTime" : 7,
  "startTimeZone" : "startTimeZone",
  "maxParticipantCount" : 5,
  "leaderInfo" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "userName" : "userName",
    "email" : "email",
    "leaderId" : 0
  },
  "totalTollFreeMinutes" : 2,
  "userId" : 6,
  "processingStatus" : "PROCESSED",
  "meetingGuid" : "meetingGuid",
  "endTime" : 1
} ]}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (query) Return only meetings with the specified meeting numeric ID. (optional)
     - parameter startDate: (query) Return meetings starting from the specified date. MM/DD/YYYY (optional)
     - parameter endDate: (query) Return meetings up until the specified date. MM/DD/YYYY (optional)
     - parameter pageSize: (query) Sets number of items returned per page. (optional)
     - parameter pageNumber: (query) Selects which page of results to return. (optional)
     - parameter order: (query) Puts results in ascending or descending order. asc/desc (optional)

     - returns: RequestBuilder<[MeetingHistory]> 
     */
    open class func listHistoryByUserWithRequestBuilder(userId: Int, meetingId: String? = nil, startDate: String? = nil, endDate: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, order: String? = nil) -> RequestBuilder<[MeetingHistory]> {
        var path = "/v1/user/{user_id}/meeting_history"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "meetingId": meetingId, 
            "startDate": startDate, 
            "endDate": endDate, 
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "order": order
        ])

        let requestBuilder: RequestBuilder<[MeetingHistory]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listRecordings: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Meeting Recordings
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter pageSize: (query) Sets number of items returned per page. (optional, default to 10)
     - parameter pageNumber: (query) Selects which page of results to return. (optional, default to 1)
     - parameter sortBy: (query) Selects which page of results to return. (optional, default to start_time)
     - parameter order: (query) Puts results in ascending or descending order. (optional, default to desc)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listRecordings(userId: Int, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, order: Order_listRecordings? = nil, completion: @escaping ((_ data: [RecordingSummary]?,_ error: Error?) -> Void)) {
        listRecordingsWithRequestBuilder(userId: userId, pageSize: pageSize, pageNumber: pageNumber, sortBy: sortBy, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Meeting Recordings
     - GET /v1/user/{user_id}/meeting_history/recordings
     - This endpoint retrieves a list of meeting recordings.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ {
  "totalDuration" : 5,
  "totalSize" : 1,
  "recordingThumbnail" : "recordingThumbnail",
  "meetingGuid" : "meetingGuid",
  "created" : 5,
  "recordingName" : "recordingName",
  "chapterCount" : 6,
  "recordingEntityId" : 0,
  "showPremiumRecordingTag" : true,
  "lastRecordingDate" : "lastRecordingDate",
  "aggregatedStatus" : "aggregatedStatus",
  "isPremiumRecording" : true
}, {
  "totalDuration" : 5,
  "totalSize" : 1,
  "recordingThumbnail" : "recordingThumbnail",
  "meetingGuid" : "meetingGuid",
  "created" : 5,
  "recordingName" : "recordingName",
  "chapterCount" : 6,
  "recordingEntityId" : 0,
  "showPremiumRecordingTag" : true,
  "lastRecordingDate" : "lastRecordingDate",
  "aggregatedStatus" : "aggregatedStatus",
  "isPremiumRecording" : true
} ]}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter pageSize: (query) Sets number of items returned per page. (optional, default to 10)
     - parameter pageNumber: (query) Selects which page of results to return. (optional, default to 1)
     - parameter sortBy: (query) Selects which page of results to return. (optional, default to start_time)
     - parameter order: (query) Puts results in ascending or descending order. (optional, default to desc)

     - returns: RequestBuilder<[RecordingSummary]> 
     */
    open class func listRecordingsWithRequestBuilder(userId: Int, pageSize: Int? = nil, pageNumber: Int? = nil, sortBy: String? = nil, order: Order_listRecordings? = nil) -> RequestBuilder<[RecordingSummary]> {
        var path = "/v1/user/{user_id}/meeting_history/recordings"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "pageSize": pageSize?.encodeToJSON(), 
            "pageNumber": pageNumber?.encodeToJSON(), 
            "sortBy": sortBy, 
            "order": order?.rawValue
        ])

        let requestBuilder: RequestBuilder<[RecordingSummary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
