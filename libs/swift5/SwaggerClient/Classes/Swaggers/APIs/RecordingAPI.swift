//
// RecordingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RecordingAPI {
    /**
     Enable Recording Sharing
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter setSharing: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createShareRecordings(userId: Int, meetingGuid: String, setSharing: SetSharing, completion: @escaping ((_ data: MeetingSharing?,_ error: Error?) -> Void)) {
        createShareRecordingsWithRequestBuilder(userId: userId, meetingGuid: meetingGuid, setSharing: setSharing).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Enable Recording Sharing
     - POST /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/
     - This endpoint creates a sharing authorization record for the specified meeting recording.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "downloadable" : true,
  "meetingGuid" : "meetingGuid",
  "created" : 1,
  "lastmodified" : 5,
  "id" : 0,
  "validity" : "validity",
  "ownerId" : 6,
  "sharingUrl" : "sharingUrl",
  "recepientType" : { },
  "properties" : {
    "nothing" : "nothing"
  },
  "passcode" : "passcode",
  "status" : "ACTIVE"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter setSharing: (body)  

     - returns: RequestBuilder<MeetingSharing> 
     */
    open class func createShareRecordingsWithRequestBuilder(userId: Int, meetingGuid: String, setSharing: SetSharing) -> RequestBuilder<MeetingSharing> {
        var path = "/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meetingGuid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setSharing)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingSharing>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete All Recordings for a Specified Meeting GUID
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAllRecordingsByMeetingGuid(userId: Int, meetingGuid: String, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        deleteAllRecordingsByMeetingGuidWithRequestBuilder(userId: userId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete All Recordings for a Specified Meeting GUID
     - DELETE /v1/user/{user_id}/meeting_history/{meeting_guid}/recordings/
     - This endpoint stops recording for a meeting in progress. 
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. 

     - returns: RequestBuilder<Meeting> 
     */
    open class func deleteAllRecordingsByMeetingGuidWithRequestBuilder(userId: Int, meetingGuid: String) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/meeting_history/{meeting_guid}/recordings/"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_guid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a Specified Recording Chapter
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter recordingChapterId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRecordingChapter(userId: Int, meetingId: Int, recordingChapterId: Int, completion: @escaping ((_ data: Meeting?,_ error: Error?) -> Void)) {
        deleteRecordingChapterWithRequestBuilder(userId: userId, meetingId: meetingId, recordingChapterId: recordingChapterId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a Specified Recording Chapter
     - DELETE /v1/user/{user_id}/meeting_history/{meeting_id}/recordings/{recording_chapter_id}/
     - This endpoint stops recording for a meeting in progress.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "recurrencePattern" : {
    "monthOfYear" : "NONE",
    "endDate" : 3,
    "dayOfMonth" : 1,
    "weekOfMonth" : "NONE",
    "daysOfWeekMask" : 7,
    "recurrenceCount" : 2,
    "recurrenceType" : "DAILY",
    "frequency" : 4
  },
  "timezone" : "America/New_York",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "seqeuenceNumber" : 5,
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "My Test Meeting",
  "uuid" : "uuid",
  "delete" : true,
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "2.10",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 1,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "nextOccurrence" : "nextOccurrence",
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 1,
    "end" : 1
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : false
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter recordingChapterId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 

     - returns: RequestBuilder<Meeting> 
     */
    open class func deleteRecordingChapterWithRequestBuilder(userId: Int, meetingId: Int, recordingChapterId: Int) -> RequestBuilder<Meeting> {
        var path = "/v1/user/{user_id}/meeting_history/{meeting_id}/recordings/{recording_chapter_id}/"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let recordingChapterIdPreEscape = "\(recordingChapterId)"
        let recordingChapterIdPostEscape = recordingChapterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recording_chapter_id}", with: recordingChapterIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Meeting>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Recording Sharing
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteShareRecordings(userId: Int, meetingGuid: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteShareRecordingsWithRequestBuilder(userId: userId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Recording Sharing
     - DELETE /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/
     - This endpoint deletes the sharing authorization associated with a meeting recording.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteShareRecordingsWithRequestBuilder(userId: Int, meetingGuid: String) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meetingGuid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get All Recordings for a Specified Meeting ID
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter meetingGuid: (query) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeetingRecordings(userId: Int, meetingId: Int, meetingGuid: String? = nil, completion: @escaping ((_ data: RecordingHistoryList?,_ error: Error?) -> Void)) {
        getMeetingRecordingsWithRequestBuilder(userId: userId, meetingId: meetingId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get All Recordings for a Specified Meeting ID
     - GET /v1/user/{user_id}/meeting_history/{meeting_id}/recordings
     - This endpoint lists the recordings for a meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter meetingGuid: (query) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. Since a given numeric meeting ID can have multiple instantiations over time, the GUID helps identify the instance of interest. (optional)

     - returns: RequestBuilder<RecordingHistoryList> 
     */
    open class func getMeetingRecordingsWithRequestBuilder(userId: Int, meetingId: Int, meetingGuid: String? = nil) -> RequestBuilder<RecordingHistoryList> {
        var path = "/v1/user/{user_id}/meeting_history/{meeting_id}/recordings"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "meetingGuid": meetingGuid
        ])

        let requestBuilder: RequestBuilder<RecordingHistoryList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Recording Download Link
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter contentId: (path) The recording properties fetched with other API endpoints will return a compositeContentId or a contentId. That value can be used for this argument. 
     - parameter isDownloadable: (query) Set to true. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRecordingContent(userId: Int, contentId: Int, isDownloadable: Bool, completion: @escaping ((_ data: Content?,_ error: Error?) -> Void)) {
        getRecordingContentWithRequestBuilder(userId: userId, contentId: contentId, isDownloadable: isDownloadable).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Recording Download Link
     - GET /v1/user/{user_id}/cms/{content_id}
     - This endpoint retrieves properties about the recording chapter.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "created" : 1,
  "contentLocation" : "contentLocation",
  "userId" : 6,
  "contentStatus" : "contentStatus",
  "contentName" : "contentName",
  "contentCategory" : "contentCategory",
  "contentUrl" : "contentUrl",
  "contentProperties" : {
    "duration" : 7,
    "thumbnail" : "thumbnail",
    "thumbnailSprite" : "thumbnailSprite",
    "hdsUrl" : "hdsUrl",
    "thumbnailCount" : 9,
    "thumbnailWidth" : 3,
    "thumbnailHeight" : 2,
    "levels" : [ {
      "file" : "file",
      "width" : 7,
      "bitrate" : 1,
      "height" : 1
    }, {
      "file" : "file",
      "width" : 7,
      "bitrate" : 1,
      "height" : 1
    } ],
    "thumbnailInterval" : 4,
    "hlsUrl" : "hlsUrl"
  },
  "contentDescription" : "contentDescription",
  "contentSize" : 5,
  "contentDuration" : 2,
  "modified" : 5,
  "id" : 0,
  "contentType" : "contentType"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter contentId: (path) The recording properties fetched with other API endpoints will return a compositeContentId or a contentId. That value can be used for this argument. 
     - parameter isDownloadable: (query) Set to true. 

     - returns: RequestBuilder<Content> 
     */
    open class func getRecordingContentWithRequestBuilder(userId: Int, contentId: Int, isDownloadable: Bool) -> RequestBuilder<Content> {
        var path = "/v1/user/{user_id}/cms/{content_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let contentIdPreEscape = "\(contentId)"
        let contentIdPostEscape = contentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{content_id}", with: contentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "isDownloadable": isDownloadable
        ])

        let requestBuilder: RequestBuilder<Content>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List Recording Sharing
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShareRecordings(userId: Int, meetingGuid: String, completion: @escaping ((_ data: MeetingSharing?,_ error: Error?) -> Void)) {
        getShareRecordingsWithRequestBuilder(userId: userId, meetingGuid: meetingGuid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Recording Sharing
     - GET /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/
     - This endpoint retrieves a the sharing authorization information for a meeting's recording. If no sharing has been authorized for the meeting, this API returns a 404 error.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "downloadable" : true,
  "meetingGuid" : "meetingGuid",
  "created" : 1,
  "lastmodified" : 5,
  "id" : 0,
  "validity" : "validity",
  "ownerId" : 6,
  "sharingUrl" : "sharingUrl",
  "recepientType" : { },
  "properties" : {
    "nothing" : "nothing"
  },
  "passcode" : "passcode",
  "status" : "ACTIVE"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 

     - returns: RequestBuilder<MeetingSharing> 
     */
    open class func getShareRecordingsWithRequestBuilder(userId: Int, meetingGuid: String) -> RequestBuilder<MeetingSharing> {
        var path = "/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meetingGuid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingSharing>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Modify Recording Sharing
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter sharingId: (path) The identifier of the sharing authorization record.  This value can be obtained from the \&quot;Id\&quot; in the response to the API GET /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing 
     - parameter modifySharing: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modifyShareRecordings(userId: Int, meetingGuid: String, sharingId: String, modifySharing: ModifySharing, completion: @escaping ((_ data: MeetingSharing?,_ error: Error?) -> Void)) {
        modifyShareRecordingsWithRequestBuilder(userId: userId, meetingGuid: meetingGuid, sharingId: sharingId, modifySharing: modifySharing).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Modify Recording Sharing
     - PUT /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/{sharingId}
     - This endpoint modifieds the sharing authorization attributes for a meeting recording.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "downloadable" : true,
  "meetingGuid" : "meetingGuid",
  "created" : 1,
  "lastmodified" : 5,
  "id" : 0,
  "validity" : "validity",
  "ownerId" : 6,
  "sharingUrl" : "sharingUrl",
  "recepientType" : { },
  "properties" : {
    "nothing" : "nothing"
  },
  "passcode" : "passcode",
  "status" : "ACTIVE"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingGuid: (path) The globally unique identifier (GUID) of the meeting of interest. This value is a string which contains the numeric meeting id, followed by a colon, followed by a 128-bit integer number formatted as 5 alphanumeric segments separated by dashes. 
     - parameter sharingId: (path) The identifier of the sharing authorization record.  This value can be obtained from the \&quot;Id\&quot; in the response to the API GET /v1/user/{user_id}/meeting_history/{meetingGuid}/sharing 
     - parameter modifySharing: (body)  

     - returns: RequestBuilder<MeetingSharing> 
     */
    open class func modifyShareRecordingsWithRequestBuilder(userId: Int, meetingGuid: String, sharingId: String, modifySharing: ModifySharing) -> RequestBuilder<MeetingSharing> {
        var path = "/v1/user/{user_id}/meeting_history/{meetingGuid}/sharing/{sharingId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingGuidPreEscape = "\(meetingGuid)"
        let meetingGuidPostEscape = meetingGuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meetingGuid}", with: meetingGuidPostEscape, options: .literal, range: nil)
        let sharingIdPreEscape = "\(sharingId)"
        let sharingIdPostEscape = sharingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharingId}", with: sharingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modifySharing)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<MeetingSharing>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Move Recording Ownership
     
     - parameter userId: (path) The ID of the user requesting the move.  This user must have Enterprise Administrator privileges.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter originalOwner: (path) The ID of the recording&#39;s current owner. 
     - parameter newOwner: (path) The ID of the intended owner for the recording. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moveRecordingOwner(userId: Int, originalOwner: Int, newOwner: Int, completion: @escaping ((_ data: RecordingMovedComp?,_ error: Error?) -> Void)) {
        moveRecordingOwnerWithRequestBuilder(userId: userId, originalOwner: originalOwner, newOwner: newOwner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Move Recording Ownership
     - POST /v1/user/{user_id}/meeting_history/move_recordings/from_user/{originalOwner}/to_user/{newOwner}
     - This endpoint changes the ownership for all recordings from the original owner account and moves them to the new owner account.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "code" : 0,
  "message" : "message"
}}]
     
     - parameter userId: (path) The ID of the user requesting the move.  This user must have Enterprise Administrator privileges.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter originalOwner: (path) The ID of the recording&#39;s current owner. 
     - parameter newOwner: (path) The ID of the intended owner for the recording. 

     - returns: RequestBuilder<RecordingMovedComp> 
     */
    open class func moveRecordingOwnerWithRequestBuilder(userId: Int, originalOwner: Int, newOwner: Int) -> RequestBuilder<RecordingMovedComp> {
        var path = "/v1/user/{user_id}/meeting_history/move_recordings/from_user/{originalOwner}/to_user/{newOwner}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let originalOwnerPreEscape = "\(originalOwner)"
        let originalOwnerPostEscape = originalOwnerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{originalOwner}", with: originalOwnerPostEscape, options: .literal, range: nil)
        let newOwnerPreEscape = "\(newOwner)"
        let newOwnerPostEscape = newOwnerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{newOwner}", with: newOwnerPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<RecordingMovedComp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter action
     */
    public enum Action_startRecording: String { 
        case start = "start"
    }

    /**
     Start Recording
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter action: (query) Always set to \&quot;start\&quot; in order to start recording. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startRecording(userId: Int, meetingId: Int, action: Action_startRecording, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        startRecordingWithRequestBuilder(userId: userId, meetingId: meetingId, action: action).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Start Recording
     - POST /v1/user/{user_id}/live_meetings/{meeting_id}/recordings
     - This endpoint starts recording for a meeting in progress. Note that this is a POST operation. Stop is a PUT operation.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter action: (query) Always set to \&quot;start\&quot; in order to start recording. 

     - returns: RequestBuilder<Void> 
     */
    open class func startRecordingWithRequestBuilder(userId: Int, meetingId: Int, action: Action_startRecording) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{meeting_id}/recordings"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": action.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter action
     */
    public enum Action_stopRecording: String { 
        case stop = "stop"
    }

    /**
     Stop Recording
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter action: (query) Always set to \&quot;stop\&quot; in order to stop recording. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopRecording(userId: Int, meetingId: Int, action: Action_stopRecording, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        stopRecordingWithRequestBuilder(userId: userId, meetingId: meetingId, action: action).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop Recording
     - PUT /v1/user/{user_id}/live_meetings/{meeting_id}/recordings
     - This endpoint stops recording for a meeting in progress. Note that this is a PUT operation. Start is a POST operation.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter meetingId: (path) The ID of the meeting you want to view. This is an integer value. You can find this ID by doing a list of meetings and referencing the \&quot;id\&quot; property. 
     - parameter action: (query) Always set to \&quot;stop\&quot; in order to stop recording. 

     - returns: RequestBuilder<Void> 
     */
    open class func stopRecordingWithRequestBuilder(userId: Int, meetingId: Int, action: Action_stopRecording) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/live_meetings/{meeting_id}/recordings"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let meetingIdPreEscape = "\(meetingId)"
        let meetingIdPostEscape = meetingIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{meeting_id}", with: meetingIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": action.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
