//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     * enum for parameter action
     */
    public enum Action_changeUserTags: String { 
        case add = "add"
        case delete = "delete"
    }

    /**
     Set User Tags
     
     - parameter userId: (path) The user ID for the account to retrieve tags.  This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter action: (query) Type of operation to be done 
     - parameter tag: (query) The name of tag 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeUserTags(userId: Int, action: Action_changeUserTags, tag: String, completion: @escaping ((_ data: TagListComp?,_ error: Error?) -> Void)) {
        changeUserTagsWithRequestBuilder(userId: userId, action: action, tag: tag).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set User Tags
     - PUT /v1/user/{userId}/tags
     - This endpoint modifies the list of tags associated with the specified user. <b>NOTE</b> Adding a tag that is not defined in the user's Enterprise returns a 200 (success) status code.  It is recommended you validate the returned list of tags.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The user ID for the account to retrieve tags.  This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter action: (query) Type of operation to be done 
     - parameter tag: (query) The name of tag 

     - returns: RequestBuilder<TagListComp> 
     */
    open class func changeUserTagsWithRequestBuilder(userId: Int, action: Action_changeUserTags, tag: String) -> RequestBuilder<TagListComp> {
        var path = "/v1/user/{userId}/tags"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "action": action.rawValue, 
            "tag": tag
        ])

        let requestBuilder: RequestBuilder<TagListComp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create User’s Default Meeting Settings
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter room: (body) The user&#39;s room details 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRoom(userId: Int, room: Room, completion: @escaping ((_ data: Room?,_ error: Error?) -> Void)) {
        createRoomWithRequestBuilder(userId: userId, room: room).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create User’s Default Meeting Settings
     - POST /v1/user/{user_id}/room
     - This endpoint creates the user’s default meeting settings.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "numericId" : "numericId",
  "originPopId" : 6,
  "isLargeMeeting" : true,
  "enforceMeetingEncryption" : true,
  "showVideoAnimations" : true,
  "backgroundImage" : "backgroundImage",
  "isModeratorLess" : true,
  "welcomeMessage" : "welcomeMessage",
  "disallowChat" : true,
  "encryptionType" : "encryptionType",
  "showAllParticipantsInIcs" : true,
  "moderatorLess" : true,
  "participantPasscode" : "participantPasscode",
  "publishMeeting" : true,
  "videoBestFit" : true,
  "enforceMeetingEncryptionAllowPSTN" : true,
  "idleTimeout" : 1,
  "name" : "name",
  "muteParticipantsOnEntry" : true,
  "id" : 0,
  "defaultLayout" : "defaultLayout",
  "playAudioAlerts" : true,
  "personalMeetingId" : 5,
  "moderatorPasscode" : "moderatorPasscode"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter room: (body) The user&#39;s room details 

     - returns: RequestBuilder<Room> 
     */
    open class func createRoomWithRequestBuilder(userId: Int, room: Room) -> RequestBuilder<Room> {
        var path = "/v1/user/{user_id}/room"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: room)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Room>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get Enterprise Profile
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getEnterpriseProfile(userId: Int, completion: @escaping ((_ data: Enterprise?,_ error: Error?) -> Void)) {
        getEnterpriseProfileWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Enterprise Profile
     - GET /v1/user/{user_id}/enterprise_profile
     - This endpoint retrieves the enterprise profile associated with the user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "expiryDate" : 5,
  "joinDate" : 1,
  "enterprise" : 6,
  "enterpriseAdmin" : true,
  "id" : 0
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<Enterprise> 
     */
    open class func getEnterpriseProfileWithRequestBuilder(userId: Int) -> RequestBuilder<Enterprise> {
        var path = "/v1/user/{user_id}/enterprise_profile"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Enterprise>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Granted Applications
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGrantedApplications(userId: Int, completion: @escaping ((_ data: GrantedApplications?,_ error: Error?) -> Void)) {
        getGrantedApplicationsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Granted Applications
     - GET /v1/user/{user_id}/granted_applications
     - This endpoint retrieves the granted applications associated with the user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "clientId" : "clientId",
  "appName" : "appName",
  "scope" : "scope",
  "appDescription" : "appDescription",
  "userId" : 0
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<GrantedApplications> 
     */
    open class func getGrantedApplicationsWithRequestBuilder(userId: Int) -> RequestBuilder<GrantedApplications> {
        var path = "/v1/user/{user_id}/granted_applications"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<GrantedApplications>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get User Feature Groups
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroups(userId: Int, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        getGroupsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get User Feature Groups
     - GET /v1/user/{user_id}/groups
     - This endpoint retrieves the feature groups associated with the user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<[String]> 
     */
    open class func getGroupsWithRequestBuilder(userId: Int) -> RequestBuilder<[String]> {
        var path = "/v1/user/{user_id}/groups"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Personal Meeting
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPersonalMeeting(userId: Int, completion: @escaping ((_ data: PersonalMeetingRoom?,_ error: Error?) -> Void)) {
        getPersonalMeetingWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Personal Meeting
     - GET /v1/user/{user_id}/personal_meeting
     - This endpoint gets the settings for a user's personal meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "timezone" : "timezone",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "title",
  "uuid" : "uuid",
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "endPointVersion",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "sequenceNumber" : 5,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 7,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "deleted" : true,
  "nextOccurrence" : 3,
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 2,
    "end" : 4
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : true
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<PersonalMeetingRoom> 
     */
    open class func getPersonalMeetingWithRequestBuilder(userId: Int) -> RequestBuilder<PersonalMeetingRoom> {
        var path = "/v1/user/{user_id}/personal_meeting"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<PersonalMeetingRoom>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get User’s Default Meeting Settings
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoom(userId: Int, completion: @escaping ((_ data: Room?,_ error: Error?) -> Void)) {
        getRoomWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get User’s Default Meeting Settings
     - GET /v1/user/{user_id}/room
     - This endpoint gets a user’s default meeting settings.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "numericId" : "numericId",
  "originPopId" : 6,
  "isLargeMeeting" : true,
  "enforceMeetingEncryption" : true,
  "showVideoAnimations" : true,
  "backgroundImage" : "backgroundImage",
  "isModeratorLess" : true,
  "welcomeMessage" : "welcomeMessage",
  "disallowChat" : true,
  "encryptionType" : "encryptionType",
  "showAllParticipantsInIcs" : true,
  "moderatorLess" : true,
  "participantPasscode" : "participantPasscode",
  "publishMeeting" : true,
  "videoBestFit" : true,
  "enforceMeetingEncryptionAllowPSTN" : true,
  "idleTimeout" : 1,
  "name" : "name",
  "muteParticipantsOnEntry" : true,
  "id" : 0,
  "defaultLayout" : "defaultLayout",
  "playAudioAlerts" : true,
  "personalMeetingId" : 5,
  "moderatorPasscode" : "moderatorPasscode"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<Room> 
     */
    open class func getRoomWithRequestBuilder(userId: Int) -> RequestBuilder<Room> {
        var path = "/v1/user/{user_id}/room"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Room>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get User Account Details
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: Int, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get User Account Details
     - GET /v1/user/{user_id}
     - This endpoint retrieves the basic account details for a given user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "optOutOffers" : true,
  "lastName" : "lastName",
  "lastLogin" : 1,
  "passwordChangeRequired" : true,
  "jid" : "jid",
  "optOutNews" : true,
  "failedLoginCount" : 5,
  "isVerified" : true,
  "timezone" : "timezone",
  "dateJoined" : 5,
  "emailId" : "emailId",
  "language" : "language",
  "title" : "title",
  "gtalkId" : "gtalkId",
  "company" : "company",
  "id" : 0,
  "isInitialSetupDone" : true,
  "geoInfo" : "geoInfo",
  "linkedinProfileUrl" : "linkedinProfileUrl",
  "defaultEndpoint" : "defaultEndpoint",
  "sfdcToken" : "sfdcToken",
  "firstName" : "firstName",
  "profilePicture" : "profilePicture",
  "skypeId" : "skypeId",
  "primaryPhone" : "primaryPhone",
  "phone" : "phone",
  "timeFormat" : 6,
  "marketoId" : "marketoId",
  "middleName" : "middleName",
  "channel_id" : 2,
  "username" : "username",
  "howDidYouHear" : "howDidYouHear"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 

     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userId: Int) -> RequestBuilder<User> {
        var path = "/v1/user/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List User Tags
     
     - parameter userId: (path) The user ID for the account to retrieve tags.  This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserTags(userId: Int, completion: @escaping ((_ data: TagListComp?,_ error: Error?) -> Void)) {
        getUserTagsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List User Tags
     - GET /v1/user/{userId}/tags
     - This endpoint retrieves all tags associated with the specified user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (path) The user ID for the account to retrieve tags.  This value is an integer which can be retrieved for the current user via the Get Enterprise Profile endpoint. 

     - returns: RequestBuilder<TagListComp> 
     */
    open class func getUserTagsWithRequestBuilder(userId: Int) -> RequestBuilder<TagListComp> {
        var path = "/v1/user/{userId}/tags"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<TagListComp>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove Granted Application
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter clientId: (path) The ID of the granted application. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func revokeGrantedApplication(userId: Int, clientId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        revokeGrantedApplicationWithRequestBuilder(userId: userId, clientId: clientId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove Granted Application
     - DELETE /v1/user/{user_id}/granted_applications/{client_id}
     - This endpoint revokes the granted application associated with the user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter clientId: (path) The ID of the granted application. 

     - returns: RequestBuilder<Void> 
     */
    open class func revokeGrantedApplicationWithRequestBuilder(userId: Int, clientId: String) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/granted_applications/{client_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter enable
     */
    public enum Enable_setGroups: String { 
        case record = "record"
        case extendedCapacity = "extended_capacity"
        case lync = "lync"
        case jabber = "jabber"
        case telepresence = "telepresence"
        case isdn = "isdn"
        case facetime = "facetime"
    }

    /**
     * enum for parameter disable
     */
    public enum Disable_setGroups: String { 
        case record = "record"
        case extendedCapacity = "extended_capacity"
        case lync = "lync"
        case jabber = "jabber"
        case telepresence = "telepresence"
        case isdn = "isdn"
        case facetime = "facetime"
    }

    /**
     Set User Feature Groups
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter enable: (query) The feature group you want to enable. (optional)
     - parameter disable: (query) The feature group you want to disable. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setGroups(userId: Int, enable: Enable_setGroups? = nil, disable: Disable_setGroups? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setGroupsWithRequestBuilder(userId: userId, enable: enable, disable: disable).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set User Feature Groups
     - PUT /v1/user/{user_id}/groups
     - This endpoint sets the feature groups associated with the user.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter enable: (query) The feature group you want to enable. (optional)
     - parameter disable: (query) The feature group you want to disable. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setGroupsWithRequestBuilder(userId: Int, enable: Enable_setGroups? = nil, disable: Disable_setGroups? = nil) -> RequestBuilder<Void> {
        var path = "/v1/user/{user_id}/groups"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "enable": enable?.rawValue, 
            "disable": disable?.rawValue
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Personal Meeting
     
     - parameter userId: (path) The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter personalMeeting: (body) The user&#39;s personal meeting room details that you wish to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePeresonalMeeting(userId: Int, personalMeeting: PersonalMeetingRoom, completion: @escaping ((_ data: PersonalMeetingRoom?,_ error: Error?) -> Void)) {
        updatePeresonalMeetingWithRequestBuilder(userId: userId, personalMeeting: personalMeeting).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Personal Meeting
     - PUT /v1/user/{user_id}/personal_meeting
     - This endpoint changes the settings for a user's personal meeting.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "notificationUrl" : "notificationUrl",
  "next" : {
    "start" : 1,
    "end" : 1
  },
  "timezone" : "timezone",
  "moderator" : {
    "firstname" : "firstname",
    "id" : 5,
    "profile_pic_url" : "profile_pic_url",
    "username" : "username",
    "lastname" : "lastname"
  },
  "description" : "description",
  "timelessMeeting" : true,
  "nextStart" : 6,
  "title" : "title",
  "uuid" : "uuid",
  "endlessMeeting" : true,
  "addAttendeePasscode" : true,
  "endPointVersion" : "endPointVersion",
  "advancedMeetingOptions" : {
    "publishMeeting" : true,
    "autoRecord" : true,
    "videoBestFit" : true,
    "editability" : {
      "autoRecord" : true,
      "enforceMeetingEncryption" : true,
      "videoBestFit" : true,
      "enforceMeetingEncryptionAllowPSTN" : true,
      "disallowChat" : true,
      "muteParticipantsOnEntry" : true,
      "moderatorLess" : true,
      "showAllAttendeesInMeetingInvite" : true
    },
    "disallowChat" : true,
    "encryptionType" : "NO_ENCRYPTION",
    "muteParticipantsOnEntry" : true,
    "moderatorLess" : true,
    "allowStream" : true,
    "showAllAttendeesInMeetingInvite" : true
  },
  "inviteeJoinOption" : 1,
  "end" : 1,
  "id" : 0,
  "locked" : true,
  "parentMeetingId" : 9,
  "sequenceNumber" : 5,
  "isLargeMeeting" : true,
  "icsUid" : "icsUid",
  "last" : {
    "start" : 7,
    "end" : 1
  },
  "attendees" : [ {
    "email" : "email"
  }, {
    "email" : "email"
  } ],
  "created" : 2,
  "start" : 6,
  "endPointType" : "WEB_APP",
  "notificationData" : "notificationData",
  "deleted" : true,
  "nextOccurrence" : 3,
  "parentMeetingUUID" : "parentMeetingUUID",
  "attendeePasscode" : "attendeePasscode",
  "numericMeetingId" : "numericMeetingId",
  "allow720p" : true,
  "lastModified" : 7,
  "isExpired" : true,
  "first" : {
    "start" : 2,
    "end" : 4
  },
  "status" : "status",
  "nextEnd" : 7,
  "isPersonalMeeting" : true
}}]
     
     - parameter userId: (path) The ID of the user of interest.  This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter personalMeeting: (body) The user&#39;s personal meeting room details that you wish to update. 

     - returns: RequestBuilder<PersonalMeetingRoom> 
     */
    open class func updatePeresonalMeetingWithRequestBuilder(userId: Int, personalMeeting: PersonalMeetingRoom) -> RequestBuilder<PersonalMeetingRoom> {
        var path = "/v1/user/{user_id}/personal_meeting"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: personalMeeting)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<PersonalMeetingRoom>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update User’s Default Meeting Settings
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter room: (body) The user&#39;s room details that you wish to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateRoom(userId: Int, room: Room, completion: @escaping ((_ data: Room?,_ error: Error?) -> Void)) {
        updateRoomWithRequestBuilder(userId: userId, room: room).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update User’s Default Meeting Settings
     - PUT /v1/user/{user_id}/room
     - This endpoint allows updating a user’s default meeting settings.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "numericId" : "numericId",
  "originPopId" : 6,
  "isLargeMeeting" : true,
  "enforceMeetingEncryption" : true,
  "showVideoAnimations" : true,
  "backgroundImage" : "backgroundImage",
  "isModeratorLess" : true,
  "welcomeMessage" : "welcomeMessage",
  "disallowChat" : true,
  "encryptionType" : "encryptionType",
  "showAllParticipantsInIcs" : true,
  "moderatorLess" : true,
  "participantPasscode" : "participantPasscode",
  "publishMeeting" : true,
  "videoBestFit" : true,
  "enforceMeetingEncryptionAllowPSTN" : true,
  "idleTimeout" : 1,
  "name" : "name",
  "muteParticipantsOnEntry" : true,
  "id" : 0,
  "defaultLayout" : "defaultLayout",
  "playAudioAlerts" : true,
  "personalMeetingId" : 5,
  "moderatorPasscode" : "moderatorPasscode"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter room: (body) The user&#39;s room details that you wish to update. 

     - returns: RequestBuilder<Room> 
     */
    open class func updateRoomWithRequestBuilder(userId: Int, room: Room) -> RequestBuilder<Room> {
        var path = "/v1/user/{user_id}/room"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: room)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<Room>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update User Account Details
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter user: (body) The user details that you wish to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(userId: Int, user: User, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(userId: userId, user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update User Account Details
     - PUT /v1/user/{user_id}
     - This endpoint allows updating a user’s basic account details.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "optOutOffers" : true,
  "lastName" : "lastName",
  "lastLogin" : 1,
  "passwordChangeRequired" : true,
  "jid" : "jid",
  "optOutNews" : true,
  "failedLoginCount" : 5,
  "isVerified" : true,
  "timezone" : "timezone",
  "dateJoined" : 5,
  "emailId" : "emailId",
  "language" : "language",
  "title" : "title",
  "gtalkId" : "gtalkId",
  "company" : "company",
  "id" : 0,
  "isInitialSetupDone" : true,
  "geoInfo" : "geoInfo",
  "linkedinProfileUrl" : "linkedinProfileUrl",
  "defaultEndpoint" : "defaultEndpoint",
  "sfdcToken" : "sfdcToken",
  "firstName" : "firstName",
  "profilePicture" : "profilePicture",
  "skypeId" : "skypeId",
  "primaryPhone" : "primaryPhone",
  "phone" : "phone",
  "timeFormat" : 6,
  "marketoId" : "marketoId",
  "middleName" : "middleName",
  "channel_id" : 2,
  "username" : "username",
  "howDidYouHear" : "howDidYouHear"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter user: (body) The user details that you wish to update. 

     - returns: RequestBuilder<User> 
     */
    open class func updateUserWithRequestBuilder(userId: Int, user: User) -> RequestBuilder<User> {
        var path = "/v1/user/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update User Account Photograph
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter file: (form) The user details that you wish to update. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserProfilePicture(userId: Int, file: URL, completion: @escaping ((_ data: UploadPhotoResponse?,_ error: Error?) -> Void)) {
        updateUserProfilePictureWithRequestBuilder(userId: userId, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update User Account Photograph
     - POST /v1/user/{user_id}/profile_picture/upload
     - This endpoint uploads a photograph to the user profile
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: access_token
     - examples: [{contentType=application/json, example={
  "url" : "url"
}}]
     
     - parameter userId: (path) The ID of the user of interest. This value is an integer which can be retrieved for the current user via the Get User Account Details endpoint. 
     - parameter file: (form) The user details that you wish to update. 

     - returns: RequestBuilder<UploadPhotoResponse> 
     */
    open class func updateUserProfilePictureWithRequestBuilder(userId: Int, file: URL) -> RequestBuilder<UploadPhotoResponse> {
        var path = "/v1/user/{user_id}/profile_picture/upload"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
        ])

        let requestBuilder: RequestBuilder<UploadPhotoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
